// Mocks generated by Mockito 5.4.4 from annotations
// in wealth_wave/test/domain/services/investment_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:wealth_wave/api/apis/investment_api.dart' as _i3;
import 'package:wealth_wave/api/apis/script_api.dart' as _i6;
import 'package:wealth_wave/api/apis/sip_api.dart' as _i9;
import 'package:wealth_wave/api/apis/transaction_api.dart' as _i8;
import 'package:wealth_wave/api/db/app_database.dart' as _i2;
import 'package:wealth_wave/contract/frequency.dart' as _i10;
import 'package:wealth_wave/contract/risk_level.dart' as _i5;
import 'package:wealth_wave/domain/services/script_executor_service.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeInvestmentDO_0 extends _i1.SmartFake implements _i2.InvestmentDO {
  _FakeInvestmentDO_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScriptDO_1 extends _i1.SmartFake implements _i2.ScriptDO {
  _FakeScriptDO_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransactionDO_2 extends _i1.SmartFake implements _i2.TransactionDO {
  _FakeTransactionDO_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSipDO_3 extends _i1.SmartFake implements _i2.SipDO {
  _FakeSipDO_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [InvestmentApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockInvestmentApi extends _i1.Mock implements _i3.InvestmentApi {
  MockInvestmentApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<int> create({
    required String? name,
    required String? description,
    required int? basketId,
    required _i5.RiskLevel? riskLevel,
    required double? value,
    required DateTime? valueUpdatedOn,
    required double? irr,
    required DateTime? maturityDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #name: name,
            #description: description,
            #basketId: basketId,
            #riskLevel: riskLevel,
            #value: value,
            #valueUpdatedOn: valueUpdatedOn,
            #irr: irr,
            #maturityDate: maturityDate,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i2.InvestmentDO>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.InvestmentDO>>.value(<_i2.InvestmentDO>[]),
      ) as _i4.Future<List<_i2.InvestmentDO>>);

  @override
  _i4.Future<List<_i2.InvestmentDO>> getEnriched() => (super.noSuchMethod(
        Invocation.method(
          #getEnriched,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.InvestmentDO>>.value(<_i2.InvestmentDO>[]),
      ) as _i4.Future<List<_i2.InvestmentDO>>);

  @override
  _i4.Future<_i2.InvestmentDO> getById({required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getById,
          [],
          {#id: id},
        ),
        returnValue: _i4.Future<_i2.InvestmentDO>.value(_FakeInvestmentDO_0(
          this,
          Invocation.method(
            #getById,
            [],
            {#id: id},
          ),
        )),
      ) as _i4.Future<_i2.InvestmentDO>);

  @override
  _i4.Future<List<_i2.InvestmentDO>> getBy({int? basketId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBy,
          [],
          {#basketId: basketId},
        ),
        returnValue:
            _i4.Future<List<_i2.InvestmentDO>>.value(<_i2.InvestmentDO>[]),
      ) as _i4.Future<List<_i2.InvestmentDO>>);

  @override
  _i4.Future<int> update({
    required int? id,
    required String? name,
    required String? description,
    required double? value,
    required double? qty,
    required DateTime? valueUpdatedOn,
    required double? irr,
    required DateTime? maturityDate,
    required _i5.RiskLevel? riskLevel,
    required int? basketId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [],
          {
            #id: id,
            #name: name,
            #description: description,
            #value: value,
            #qty: qty,
            #valueUpdatedOn: valueUpdatedOn,
            #irr: irr,
            #maturityDate: maturityDate,
            #riskLevel: riskLevel,
            #basketId: basketId,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> updateValue({
    required int? id,
    required double? value,
    required DateTime? valueUpdatedOn,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateValue,
          [],
          {
            #id: id,
            #value: value,
            #valueUpdatedOn: valueUpdatedOn,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deleteBy({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #deleteBy,
          [],
          {#id: id},
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}

/// A class which mocks [ScriptApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockScriptApi extends _i1.Mock implements _i6.ScriptApi {
  MockScriptApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<int> create({
    required int? investmentId,
    required String? script,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #investmentId: investmentId,
            #script: script,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i2.ScriptDO>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i4.Future<List<_i2.ScriptDO>>.value(<_i2.ScriptDO>[]),
      ) as _i4.Future<List<_i2.ScriptDO>>);

  @override
  _i4.Future<_i2.ScriptDO?> getBy({int? investmentId}) => (super.noSuchMethod(
        Invocation.method(
          #getBy,
          [],
          {#investmentId: investmentId},
        ),
        returnValue: _i4.Future<_i2.ScriptDO?>.value(),
      ) as _i4.Future<_i2.ScriptDO?>);

  @override
  _i4.Future<_i2.ScriptDO> getById({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [],
          {#id: id},
        ),
        returnValue: _i4.Future<_i2.ScriptDO>.value(_FakeScriptDO_1(
          this,
          Invocation.method(
            #getById,
            [],
            {#id: id},
          ),
        )),
      ) as _i4.Future<_i2.ScriptDO>);

  @override
  _i4.Future<int> update({
    required int? id,
    required int? investmentId,
    required String? script,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [],
          {
            #id: id,
            #investmentId: investmentId,
            #script: script,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deleteBy({
    int? id,
    int? investmentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBy,
          [],
          {
            #id: id,
            #investmentId: investmentId,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}

/// A class which mocks [ScriptExecutorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockScriptExecutorService extends _i1.Mock
    implements _i7.ScriptExecutorService {
  MockScriptExecutorService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<double?> executeScript({required String? script}) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeScript,
          [],
          {#script: script},
        ),
        returnValue: _i4.Future<double?>.value(),
      ) as _i4.Future<double?>);
}

/// A class which mocks [TransactionApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionApi extends _i1.Mock implements _i8.TransactionApi {
  MockTransactionApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<int> create({
    required int? investmentId,
    required String? description,
    required double? amount,
    required double? qty,
    required DateTime? createdOn,
    int? sipId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #investmentId: investmentId,
            #description: description,
            #amount: amount,
            #qty: qty,
            #createdOn: createdOn,
            #sipId: sipId,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i2.TransactionDO>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.TransactionDO>>.value(<_i2.TransactionDO>[]),
      ) as _i4.Future<List<_i2.TransactionDO>>);

  @override
  _i4.Future<List<_i2.TransactionDO>> getBy({
    int? investmentId,
    int? sipId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBy,
          [],
          {
            #investmentId: investmentId,
            #sipId: sipId,
          },
        ),
        returnValue:
            _i4.Future<List<_i2.TransactionDO>>.value(<_i2.TransactionDO>[]),
      ) as _i4.Future<List<_i2.TransactionDO>>);

  @override
  _i4.Future<_i2.TransactionDO> getById({required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getById,
          [],
          {#id: id},
        ),
        returnValue: _i4.Future<_i2.TransactionDO>.value(_FakeTransactionDO_2(
          this,
          Invocation.method(
            #getById,
            [],
            {#id: id},
          ),
        )),
      ) as _i4.Future<_i2.TransactionDO>);

  @override
  _i4.Future<int> update({
    required int? id,
    required int? investmentId,
    required String? description,
    required double? amount,
    required double? qty,
    required DateTime? createdOn,
    int? sipId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [],
          {
            #id: id,
            #investmentId: investmentId,
            #description: description,
            #amount: amount,
            #qty: qty,
            #createdOn: createdOn,
            #sipId: sipId,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deleteBy({
    int? investmentId,
    int? sipId,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBy,
          [],
          {
            #investmentId: investmentId,
            #sipId: sipId,
            #id: id,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}

/// A class which mocks [SipApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockSipApi extends _i1.Mock implements _i9.SipApi {
  MockSipApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<int> create({
    required int? investmentId,
    required String? description,
    required double? amount,
    required DateTime? startDate,
    required DateTime? endDate,
    required _i10.Frequency? frequency,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #investmentId: investmentId,
            #description: description,
            #amount: amount,
            #startDate: startDate,
            #endDate: endDate,
            #frequency: frequency,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i2.SipDO>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i4.Future<List<_i2.SipDO>>.value(<_i2.SipDO>[]),
      ) as _i4.Future<List<_i2.SipDO>>);

  @override
  _i4.Future<List<_i2.SipDO>> getBy({int? investmentId}) => (super.noSuchMethod(
        Invocation.method(
          #getBy,
          [],
          {#investmentId: investmentId},
        ),
        returnValue: _i4.Future<List<_i2.SipDO>>.value(<_i2.SipDO>[]),
      ) as _i4.Future<List<_i2.SipDO>>);

  @override
  _i4.Future<_i2.SipDO> getById({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [],
          {#id: id},
        ),
        returnValue: _i4.Future<_i2.SipDO>.value(_FakeSipDO_3(
          this,
          Invocation.method(
            #getById,
            [],
            {#id: id},
          ),
        )),
      ) as _i4.Future<_i2.SipDO>);

  @override
  _i4.Future<int> update({
    required int? id,
    required int? investmentId,
    required String? description,
    required double? amount,
    required DateTime? startDate,
    required DateTime? endDate,
    required _i10.Frequency? frequency,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [],
          {
            #id: id,
            #investmentId: investmentId,
            #description: description,
            #amount: amount,
            #startDate: startDate,
            #endDate: endDate,
            #frequency: frequency,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deleteBy({
    int? id,
    int? investmentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBy,
          [],
          {
            #id: id,
            #investmentId: investmentId,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}
