// Mocks generated by Mockito 5.4.4 from annotations
// in wealth_wave/test/domain/services/script_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:wealth_wave/api/apis/script_api.dart' as _i3;
import 'package:wealth_wave/api/db/app_database.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeScriptDO_0 extends _i1.SmartFake implements _i2.ScriptDO {
  _FakeScriptDO_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ScriptApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockScriptApi extends _i1.Mock implements _i3.ScriptApi {
  MockScriptApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<int> create({
    required int? investmentId,
    required String? script,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #investmentId: investmentId,
            #script: script,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i2.ScriptDO>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i4.Future<List<_i2.ScriptDO>>.value(<_i2.ScriptDO>[]),
      ) as _i4.Future<List<_i2.ScriptDO>>);

  @override
  _i4.Future<_i2.ScriptDO> getBy({int? investmentId}) => (super.noSuchMethod(
        Invocation.method(
          #getBy,
          [],
          {#investmentId: investmentId},
        ),
        returnValue: _i4.Future<_i2.ScriptDO>.value(_FakeScriptDO_0(
          this,
          Invocation.method(
            #getBy,
            [],
            {#investmentId: investmentId},
          ),
        )),
      ) as _i4.Future<_i2.ScriptDO>);

  @override
  _i4.Future<_i2.ScriptDO> getById({required int? id}) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [],
          {#id: id},
        ),
        returnValue: _i4.Future<_i2.ScriptDO>.value(_FakeScriptDO_0(
          this,
          Invocation.method(
            #getById,
            [],
            {#id: id},
          ),
        )),
      ) as _i4.Future<_i2.ScriptDO>);

  @override
  _i4.Future<int> update({
    required int? id,
    required int? investmentId,
    required String? script,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [],
          {
            #id: id,
            #investmentId: investmentId,
            #script: script,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> deleteBy({
    int? id,
    int? investmentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBy,
          [],
          {
            #id: id,
            #investmentId: investmentId,
          },
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}
